openapi: 3.0.1
info:
  title: Pledger
  contact:
    name: Jong Soft Development
    url: https://github.com/pledger-io/rest-application
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
security:
- bearer: []
paths:
  /:
    get:
      operationId: index
      responses:
        "200":
          description: index 200 response
          content:
            application/json:
              schema:
                type: object
  /.well-known/public-key:
    get:
      tags:
      - Authentication
      summary: Get the signing key
      description: Use this operation to obtain the public signing key used to sign
        the JWT.
      operationId: publicKey
      responses:
        "200":
          description: publicKey 200 response
          content:
            application/json:
              schema:
                type: string
  /api/account-types:
    get:
      tags:
      - Account information
      summary: List types
      description: Get a listing of all available account types in the system.
      operationId: listTypes
      responses:
        "200":
          description: listTypes 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/accounts:
    put:
      tags:
      - Account information
      summary: Create account
      description: This operation will allow for adding new accounts to the system
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountEditRequest"
        required: true
      responses:
        "200":
          description: createAccount 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
    post:
      tags:
      - Account information
      summary: Search accounts
      description: Search through all accounts using the provided filter set
      operationId: listAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSearchRequest"
        required: true
      responses:
        "200":
          description: listAccounts 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_AccountResponse_"
  /api/accounts/all:
    get:
      tags:
      - Account information
      summary: List all accounts
      description: Fetch all accounts registered to the authenticated user
      operationId: listAllAccounts
      responses:
        "200":
          description: listAllAccounts 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountResponse"
  /api/accounts/auto-complete:
    get:
      tags:
      - Account information
      summary: Autocomplete accounts
      description: Performs a search operation based on the partial name (token) of
        the given account type
      operationId: autocomplete
      parameters:
      - name: token
        in: query
        description: A partial search text.
        required: true
        schema:
          type: string
      - name: type
        in: query
        description: "An account type to limit the search to, see <a href='#get-/api/account-type'>types</a>\
          \ for available types."
        required: true
        schema:
          type: string
        example: credit
      responses:
        "200":
          description: autocomplete 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountResponse"
  /api/accounts/my-own:
    get:
      tags:
      - Account information
      summary: List own accounts
      description: List all accounts that are creatable in the front-end using one
        of the selectable account types
      operationId: ownAccounts
      responses:
        "200":
          description: ownAccounts 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountResponse"
  /api/accounts/top/creditor/{start}/{end}:
    get:
      tags:
      - Account information
      summary: Top creditor accounts
      description: Calculates and returns the accounts that credited the most money
        for the given date range
      operationId: listTopCreditors
      parameters:
      - name: start
        in: path
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: path
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: listTopCreditors 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountSpendingResponse"
  /api/accounts/top/debit/{start}/{end}:
    get:
      tags:
      - Account information
      summary: Top debit accounts
      description: Calculates and returns the accounts where you spent the most for
        the given date range
      operationId: listTopDebtors
      parameters:
      - name: start
        in: path
        required: true
        schema:
          type: string
          format: date
      - name: end
        in: path
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          description: listTopDebtors 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountSpendingResponse"
  /api/accounts/{accountId}:
    get:
      tags:
      - Account information
      summary: Get Account
      description: Attempts to get the account with matching account id. If no account
        is found or you are notauthorized an exception will be returned.
      operationId: get
      parameters:
      - name: accountId
        in: path
        description: The unique account id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The resulting account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "401":
          description: The account cannot be accessed
        "404":
          description: No account can be located
    post:
      tags:
      - Account information
      summary: Update Account
      description: "Update an existing account with the new details provided in the\
        \ body. The updated account will be returned, or if no account is found an\
        \ exception."
      operationId: update
      parameters:
      - name: accountId
        in: path
        description: The unique account id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountEditRequest"
        required: true
      responses:
        "200":
          description: The updated account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "401":
          description: The account cannot be accessed
        "404":
          description: No account can be located
    delete:
      tags:
      - Account information
      summary: Delete Account
      operationId: delete
      parameters:
      - name: accountId
        in: path
        description: The unique account id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Account successfully deleted
        "404":
          description: No account can be located
        "200":
          description: delete 200 response
  /api/accounts/{accountId}/image:
    post:
      tags:
      - Account information
      summary: Attach icon
      description: Attach an icon to the account. If any icon was previously registered
        it will be removed from the system.
      operationId: persistImage
      parameters:
      - name: accountId
        in: path
        description: The unique account id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountImageRequest"
        required: true
      responses:
        "200":
          description: persistImage 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
  /api/accounts/{accountId}/savings:
    post:
      tags:
      - Account information
      summary: Create saving goal
      description: "Creates a saving goal into the account, only valid for accounts\
        \ of types SAVINGS and JOINED_SAVINGS"
      operationId: addSavingGoal
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSavingGoalCreateRequest"
        required: true
      responses:
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "200":
          description: addSavingGoal 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
  /api/accounts/{accountId}/savings/{savingId}:
    post:
      tags:
      - Account information
      summary: Adjust Saving Goal
      description: Adjust a saving goal already attached to the savings account.
      operationId: updateSavingGoal
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: savingId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSavingGoalCreateRequest"
        required: true
      responses:
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "200":
          description: updateSavingGoal 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
    delete:
      tags:
      - Account information
      summary: Delete saving goal
      description: Removes a saving goal from the account.
      operationId: deleteSavingGoal
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: savingId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "200":
          description: deleteSavingGoal 200 response
  /api/accounts/{accountId}/savings/{savingId}/reserve:
    put:
      tags:
      - Account information
      summary: Reserve Saving Goal
      description: Reserve money from the account towards the saving goal.
      operationId: reserveForSavingGoal
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: savingId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: amount
        in: query
        required: true
        schema:
          minimum: 0
          exclusiveMinimum: true
          type: number
          format: double
      responses:
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "200":
          description: reserveForSavingGoal 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
  /api/accounts/{accountId}/transactions:
    put:
      tags:
      - Transactions
      summary: Create transaction
      description: Create a new transaction in the provided accounts
      operationId: create
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountTransactionCreateRequest"
        required: true
      responses:
        "204":
          description: The transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
    post:
      tags:
      - Transactions
      summary: Search transactions
      description: Search through all transaction in the account using the provided
        filter
      operationId: search
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountTransactionSearchRequest"
        required: true
      responses:
        "200":
          description: Paged result of transactions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_TransactionResponse_"
        "401":
          description: The account cannot be accessed
        "404":
          description: No account can be located
  /api/accounts/{accountId}/transactions/first:
    get:
      tags:
      - Transactions
      summary: Get the first transaction
      description: Returns the first transaction found for the given account
      operationId: first
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: description
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: The transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "404":
          description: No transaction found
  /api/accounts/{accountId}/transactions/{transactionId}:
    get:
      tags:
      - Transactions
      summary: Get a transaction
      description: Returns one single transaction identified by the provided id
      operationId: get_1
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: transactionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: The transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "401":
          description: The transaction cannot be accessed
        "404":
          description: No account can be located
    post:
      tags:
      - Transactions
      summary: Update a transaction
      description: Updates a single transaction and returns the updated version
      operationId: update_1
      parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: transactionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountTransactionCreateRequest"
        required: true
      responses:
        "200":
          description: The transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
        "401":
          description: The transaction cannot be accessed
        "404":
          description: Transaction not found
    delete:
      tags:
      - Transactions
      summary: Delete transaction
      description: Delete a transaction from the account
      operationId: delete_1
      parameters:
      - name: transactionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: accountId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: delete_1 204 response
    patch:
      tags:
      - Transactions
      summary: Split transactions
      description: "Split the transaction into smaller pieces, all belonging to the\
        \ same actual transaction."
      operationId: split
      parameters:
      - name: transactionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: accountId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountTransactionSplitRequest"
        required: true
      responses:
        "200":
          description: split 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
  /api/attachment:
    post:
      tags:
      - Attachments
      summary: Upload attachment
      description: Upload a file so that it can be attached to one of the entities
        in FinTrack
      operationId: upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "201":
          description: upload 201 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
  /api/attachment/{fileCode}:
    get:
      tags:
      - Attachments
      summary: Download attachment
      description: "Download an existing attachment, if file encryption is enabled\
        \ this will throw an exception if the current user did not upload the file."
      operationId: download
      parameters:
      - name: fileCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: download 200 response
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  format: byte
    delete:
      tags:
      - Attachments
      summary: Delete attachment
      description: "Delete an existing attachment, if file encryption is enabled this\
        \ will throw an exception if the current user did not upload the file."
      operationId: delete_2
      parameters:
      - name: fileCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: delete_2 204 response
  /api/budgets:
    get:
      tags:
      - Budget
      summary: First budget start
      description: Computes the date of the start of the first budget registered in
        FinTrack
      operationId: firstBudget
      responses:
        "200":
          description: firstBudget 200 response
          content:
            application/json:
              schema:
                type: string
                format: date
    put:
      tags:
      - Budget
      summary: Create initial budget
      description: Create a new budget in the system.
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetCreateRequest"
        required: true
      responses:
        "400":
          description: There is already an open budget.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
    patch:
      tags:
      - Budget
      summary: Patch budget.
      description: Update an existing budget that is not yet closed in the system.
      operationId: patchBudget
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetCreateRequest"
        required: true
      responses:
        "200":
          description: patchBudget 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetResponse"
  /api/budgets/auto-complete:
    get:
      tags:
      - Budget
      summary: Lookup expense
      description: Search for expenses that match the provided token
      operationId: autocomplete_1
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: autocomplete_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EntityRef.NamedEntity"
  /api/budgets/current:
    get:
      tags:
      - Budget
      summary: Current month
      description: Get the budget for the current month.
      operationId: currentMonth
      responses:
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "200":
          description: currentMonth 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetResponse"
  /api/budgets/expenses:
    patch:
      tags:
      - Budget
      summary: Patch Expenses
      description: Create or update an expense in the currents month budget.
      operationId: patchExpenses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpensePatchRequest"
        required: true
      responses:
        "200":
          description: patchExpenses 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetResponse"
  /api/budgets/expenses/{expenseId}/{year}/{month}/transactions:
    get:
      tags:
      - Budget
      summary: Transaction overview
      description: Paged listing of all transactions for the provided expense and
        month.
      operationId: transactions
      parameters:
      - name: expenseId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: year
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: month
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: transactions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_TransactionResponse_"
  /api/budgets/expenses/{id}/{year}/{month}:
    get:
      tags:
      - Budget
      summary: Compute expense
      description: Computes the expense for the provided year and month
      operationId: computeExpense
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: year
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: month
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: computeExpense 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ComputedExpenseResponse"
  /api/budgets/{year}/{month}:
    get:
      tags:
      - Budget
      summary: Get any month
      description: Get the budget for the given year and month combination.
      operationId: givenMonth
      parameters:
      - name: year
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: month
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "200":
          description: givenMonth 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetResponse"
  /api/categories:
    get:
      tags:
      - Category
      summary: List categories
      description: List all available categories
      operationId: getAll
      responses:
        "200":
          description: getAll 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"
    put:
      tags:
      - Category
      summary: Create category
      description: Adds a new category to the system
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryCreateRequest"
        required: true
      responses:
        "201":
          description: createCategory 201 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
    post:
      tags:
      - Category
      summary: Search categories
      description: Search through the categories with the provided filter set
      operationId: searchCategories
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategorySearchRequest"
        required: true
      responses:
        "200":
          description: searchCategories 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_CategoryResponse_"
  /api/categories/auto-complete:
    get:
      tags:
      - Category
      summary: Autocomplete
      description: List all categories matching the provided token
      operationId: getCategoriesByToken
      parameters:
      - name: token
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: getCategoriesByToken 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"
  /api/categories/{id}:
    get:
      tags:
      - Category
      summary: Get category
      description: Get a single category by its Id
      operationId: getCategory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getCategory 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
    post:
      tags:
      - Category
      summary: Update category
      description: Update a single category by its Id
      operationId: updateCategory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryCreateRequest"
        required: true
      responses:
        "200":
          description: updateCategory 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
    delete:
      tags:
      - Category
      summary: Delete category
      description: Delete a single category by its Id
      operationId: deleteCategory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: deleteCategory 204 response
  /api/contracts:
    get:
      tags:
      - Contract
      summary: List contracts
      description: List all contracts split in both active and inactive ones
      operationId: getAll_1
      responses:
        "200":
          description: getAll_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractOverviewResponse"
    put:
      tags:
      - Contract
      summary: Create contract
      description: Adds a new contract to FinTrack for the authenticated user
      operationId: createContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractCreateRequest"
        required: true
      responses:
        "201":
          description: createContract 201 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
  /api/contracts/auto-complete:
    get:
      tags:
      - Contract
      summary: Autocomplete contracts
      description: Performs a search operation based on the partial name (token)
      operationId: getByToken
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getByToken 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContractResponse"
  /api/contracts/{contractId}:
    get:
      tags:
      - Contract
      summary: Get contract
      description: Get a single contract from FinTrack
      operationId: get_2
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: get_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
    post:
      tags:
      - Contract
      summary: Update contract
      description: Updates an existing contract for the authenticated user
      operationId: update_2
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractCreateRequest"
        required: true
      responses:
        "200":
          description: update_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
    delete:
      tags:
      - Contract
      summary: Delete contract
      description: Archives an existing contract
      operationId: delete_3
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: delete_3 200 response
  /api/contracts/{contractId}/attachment:
    post:
      tags:
      - Contract
      summary: Attach file
      description: This call will register an attachment to the contract
      operationId: registerAttachment
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContractAttachmentRequest"
        required: true
      responses:
        "200":
          description: registerAttachment 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
  /api/contracts/{contractId}/expire-warning:
    get:
      tags:
      - Contract
      summary: Enable warning
      description: This call will enable the warning 1 month before contract expires
      operationId: warnBeforeExpireDate
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: warnBeforeExpireDate 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
  /api/contracts/{contractId}/schedule:
    put:
      tags:
      - Contract
      summary: Schedule transaction
      description: Create a new schedule for creating transaction under this contract.
      operationId: schedule
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateScheduleRequest"
        required: true
      responses:
        "200":
          description: schedule 200 response
  /api/contracts/{contractId}/transactions:
    get:
      tags:
      - Contract
      summary: Transaction overview
      description: Paged listing of all transactions that belong to a contract
      operationId: transactions_1
      parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: transactions_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_TransactionResponse_"
  /api/import:
    put:
      tags:
      - Importer
      summary: Create importer
      description: "Creates a new importer job in FinTrack, which can be used to import\
        \ a CSV of transactions"
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImporterCreateRequest"
        required: true
      responses:
        "200":
          description: create_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImporterResponse"
    post:
      tags:
      - Importer
      summary: List jobs
      description: This operation will list all the run importer jobs for the current
        user
      operationId: list
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportSearchRequest"
        required: true
      responses:
        "200":
          description: list 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_ImporterResponse_"
  /api/import/config:
    get:
      tags:
      - Importer
      summary: List configurations
      description: List all available importer configurations in FinTrack
      operationId: config
      responses:
        "200":
          description: config 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CSVImporterConfigResponse"
    put:
      tags:
      - Importer
      summary: Create configuration
      description: "Creates a new importer configuration in FinTrack, using the provided\
        \ file token"
      operationId: createConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CSVImporterConfigCreateRequest"
        required: true
      responses:
        "200":
          description: createConfig 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CSVImporterConfigResponse"
  /api/import/{batchSlug}:
    get:
      tags:
      - Importer
      summary: Get Importer Job
      description: Fetch a single importer job from FinTrack
      operationId: get_3
      parameters:
      - name: batchSlug
        in: path
        description: The unique identifier
        required: true
      responses:
        "200":
          description: get_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImporterResponse"
    delete:
      tags:
      - Importer
      summary: Delete importer job
      description: Removes an unfinished job from the system. Note that already completed
        jobs cannot be removed.
      operationId: delete_4
      parameters:
      - name: batchSlug
        in: path
        description: The unique identifier
        required: true
      responses:
        "204":
          description: delete_4 204 response
          content:
            application/json:
              schema:
                type: string
  /api/import/{batchSlug}/transactions:
    post:
      tags:
      - Importer
      summary: Transaction overview
      description: Search for transactions created by the importer job
      operationId: getTransactions
      parameters:
      - name: batchSlug
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionSearchRequest"
        required: true
      responses:
        "200":
          description: getTransactions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_TransactionResponse_"
  /api/import/{batchSlug}/transactions/{transactionId}:
    delete:
      tags:
      - Importer
      summary: Delete transaction
      description: Search for transactions created by the importer job
      operationId: deleteTransaction
      parameters:
      - name: batchSlug
        in: path
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: deleteTransaction 204 response
  /api/localization/lang/{language}:
    get:
      tags:
      - Localization
      summary: Get a localization file
      operationId: getTranslations
      parameters:
      - name: language
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getTranslations 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/localization/lang/{language}/{textKey}:
    get:
      tags:
      - Localization
      summary: Get single translation
      operationId: getTranslation
      parameters:
      - name: language
        in: path
        required: true
        schema:
          type: string
      - name: textKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getTranslation 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageResponse"
  /api/profile:
    get:
      tags:
      - User profile
      summary: Get profile of authenticated user
      operationId: getProfile
      responses:
        "200":
          description: getProfile 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
    patch:
      tags:
      - User profile
      summary: Update part of the user profile
      description: This change will be applied to the authenticated user
      operationId: patchProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchProfileRequest"
        required: true
      responses:
        "200":
          description: patchProfile 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
  /api/profile/export:
    get:
      tags:
      - User profile
      summary: Export to JSON
      description: Exports the profile of the authenticated user to JSON
      operationId: exportProfile
      responses:
        "200":
          description: exportProfile 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportJson"
  /api/profile/multi-factor/disable:
    post:
      tags:
      - User profile
      summary: Disable 2-factor authentication
      description: "This operation will disable 2-factor authentication, but will\
        \ only work if it was enabled on the authorized account"
      operationId: disable2Factor
      responses:
        "204":
          description: disable2Factor 204 response
  /api/profile/multi-factor/enable:
    post:
      tags:
      - User profile
      summary: Enable 2-factor authentication
      description: This will activate 2-factor authentication when the security code
        matches the one recorded
      operationId: enable2Factor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultiFactorRequest"
        required: true
      responses:
        "204":
          description: enable2Factor 204 response
  /api/profile/multi-factor/qr-code:
    get:
      tags:
      - User profile
      summary: QR Code
      description: Use this API to obtain a QR code that can be used to scan in a
        2-factor application
      operationId: getQrCode
      responses:
        "200":
          description: getQrCode 200 response
          content:
            image/png:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/profile/sessions:
    get:
      tags:
      - User profile
      summary: Active Sessions
      description: Get a list of active session for the current user.
      operationId: getActiveSessions
      responses:
        "200":
          description: getActiveSessions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SessionResponse"
    put:
      tags:
      - User profile
      summary: Create session token
      description: Create a new session token that has a longer validity then default
        authentication tokens.
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenCreateRequest"
        required: true
      responses:
        "200":
          description: createToken 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SessionResponse"
  /api/profile/sessions/{id}:
    delete:
      tags:
      - User profile
      operationId: deleteSession
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: deleteSession 204 response
  /api/runtime-process/clean-up:
    get:
      tags:
      - Process Engine
      summary: Force History Clean
      description: Trigger a history clean-up job to run
      operationId: triggerHistoryCleaning
      responses:
        "204":
          description: No Content
  /api/runtime-process/{processDefinitionKey}:
    get:
      tags:
      - Process Engine
      summary: Process History
      description: Lists the historic executions for the provided process definition
        key
      operationId: getProcessHistory
      parameters:
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getProcessHistory 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProcessResponse"
  /api/runtime-process/{processDefinitionKey}/start:
    put:
      tags:
      - Process Engine
      summary: Create Process
      description: "Creates and executes a new process for the selected definition,\
        \ with the provided map as parameters"
      operationId: startProcess
      parameters:
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
        required: true
      responses:
        "200":
          description: startProcess 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessResponse"
  /api/runtime-process/{processDefinitionKey}/{businessKey}:
    get:
      tags:
      - Process Engine
      summary: Process History for key
      description: "List the history executions for the provided definition key, but\
        \ only once with matching business key"
      operationId: getProcessHistoryByBusinessKey
      parameters:
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getProcessHistoryByBusinessKey 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProcessResponse"
  /api/runtime-process/{processDefinitionKey}/{businessKey}/{instanceId}:
    delete:
      tags:
      - Process Engine
      summary: Delete Process
      description: Removes a active process from the execution list
      operationId: deleteProcess
      parameters:
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
  /api/runtime-process/{processDefinitionKey}/{businessKey}/{instanceId}/tasks:
    get:
      tags:
      - Process Engine
      summary: List Tasks
      description: List all available tasks for the provided process
      operationId: getTasks
      parameters:
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getTasks 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProcessTaskResponse"
  /api/runtime-process/{processDefinitionKey}/{businessKey}/{instanceId}/tasks/{taskId}:
    delete:
      tags:
      - Process Engine
      summary: Complete Task
      description: Completes the given task without any additional data.
      operationId: deleteTask
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteTask 200 response
  /api/runtime-process/{processDefinitionKey}/{businessKey}/{instanceId}/tasks/{taskId}/complete:
    post:
      tags:
      - Process Engine
      summary: Complete Task
      description: Completes the given task with the provided data.
      operationId: completeTask
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariableMap"
        required: true
      responses:
        "200":
          description: completeTask 200 response
  /api/runtime-process/{processDefinitionKey}/{businessKey}/{instanceId}/tasks/{taskId}/variables:
    get:
      tags:
      - Process Engine
      summary: Get Task
      description: Get the details of the given task.
      operationId: getTask
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: string
      - name: variable
        in: query
        schema:
          type: string
          nullable: true
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VariableMap"
  /api/runtime-process/{processDefinitionKey}/{businessKey}/{instanceId}/variables:
    get:
      tags:
      - Process Engine
      summary: Get variables
      description: This operation lists all process variables available for the provided
        process
      operationId: getVariables
      parameters:
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getVariables 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProcessVariableResponse"
  /api/runtime-process/{processDefinitionKey}/{businessKey}/{instanceId}/variables/{variable}:
    get:
      tags:
      - Process Engine
      summary: Get variable
      description: This operation lists variables of a given name for a process
      operationId: getVariable
      parameters:
      - name: processDefinitionKey
        in: path
        required: true
        schema:
          type: string
      - name: instanceId
        in: path
        required: true
        schema:
          type: string
      - name: variable
        in: path
        required: true
        schema:
          type: string
      - name: businessKey
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getVariable 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProcessVariableResponse"
  /api/schedule/transaction:
    get:
      tags:
      - Scheduling agent
      summary: List all available transaction schedules
      operationId: listTransactionSchedule
      responses:
        "200":
          description: listTransactionSchedule 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScheduledTransactionResponse"
    put:
      tags:
      - Scheduling agent
      summary: Create a new transaction schedule
      operationId: createTransactionSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduledTransactionCreateRequest"
        required: true
      responses:
        "201":
          description: createTransactionSchedule 201 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledTransactionResponse"
    post:
      tags:
      - Scheduling agent
      summary: Search schedule
      operationId: searchTransactionSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleSearchRequest"
        required: true
      responses:
        "200":
          description: searchTransactionSchedule 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScheduledTransactionResponse"
  /api/schedule/transaction/{scheduleId}:
    get:
      tags:
      - Scheduling agent
      summary: Get a single transaction schedule
      description: Lookup a transaction schedule in the system by its technical id
      operationId: fetchTransactionSchedule
      parameters:
      - name: scheduleId
        in: path
        description: The technical id of the transaction schedule
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: fetchTransactionSchedule 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledTransactionResponse"
    delete:
      tags:
      - Scheduling agent
      summary: Remove a transaction schedule
      operationId: removeTransactionSchedule
      parameters:
      - name: scheduleId
        in: path
        description: The technical id of the transaction schedule
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: removeTransactionSchedule 204 response
    patch:
      tags:
      - Scheduling agent
      summary: Update part of a transaction schedule
      operationId: patchTransactionSchedule
      parameters:
      - name: scheduleId
        in: path
        description: The technical id of the transaction schedule
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduledTransactionPatchRequest"
        required: true
      responses:
        "200":
          description: patchTransactionSchedule 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduledTransactionResponse"
  /api/security/2-factor:
    post:
      tags:
      - Authentication
      summary: Verify MFA token
      description: Used to verify the user token against that what is expected. If
        valid the user will get a new JWT with updated authorizations.
      operationId: validateToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultiFactorRequest_1"
        required: true
      responses:
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "200":
          description: validateToken 200 response
          content:
            application/json:
              schema:
                type: object
  /api/security/create-account:
    put:
      tags:
      - Authentication
      summary: Create account
      description: Creates a new account
      operationId: createAccount_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                nullable: true
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
  /api/settings:
    get:
      tags:
      - Application Settings
      summary: Get settings
      description: List all available settings in the system
      operationId: getSettings
      responses:
        "200":
          description: getSettings 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SettingResponse"
  /api/settings/currencies:
    get:
      tags:
      - Application Settings
      summary: List all
      description: List all available currencies in the system
      operationId: getAllCurrencies
      responses:
        "200":
          description: getAllCurrencies 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CurrencyResponse"
    put:
      tags:
      - Application Settings
      summary: Create currency
      description: Add a new currency to the system
      operationId: createCurrency
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrencyRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyResponse"
  /api/settings/currencies/{currencyCode}:
    get:
      tags:
      - Application Settings
      summary: Get currency
      description: "Returns an existing currency in the syste,"
      operationId: getCurrency
      parameters:
      - name: currencyCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The currency entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyResponse"
        "404":
          description: The exception that occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
    post:
      tags:
      - Application Settings
      summary: Update currency
      description: Updates an existing currency in the system
      operationId: updateCurrency
      parameters:
      - name: currencyCode
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrencyRequest"
        required: true
      responses:
        "200":
          description: The currency entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyResponse"
        "404":
          description: The exception that occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
    patch:
      tags:
      - Application Settings
      summary: Patch currency
      description: Partially update an existing currency in the system
      operationId: patchCurrency
      parameters:
      - name: currencyCode
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrencyPatchRequest"
        required: true
      responses:
        "200":
          description: The currency entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrencyResponse"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
  /api/settings/{setting}:
    post:
      tags:
      - Application Settings
      summary: Update setting
      description: Update a single setting in the system
      operationId: updateSettings
      parameters:
      - name: setting
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingUpdateRequest"
        required: true
      responses:
        "204":
          description: No Content
  /api/statistics/balance:
    post:
      tags:
      - Reports
      summary: Calculate balance
      description: This operation will calculate the balance for the current user
        based upon the given filters
      operationId: getBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceRequest"
        required: true
      responses:
        "200":
          description: getBalance 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceResponse"
  /api/statistics/balance/daily:
    post:
      tags:
      - Reports
      summary: Daily balance
      description: Compute the daily balance based upon the provided request
      operationId: dailyBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceRequest"
        required: true
      responses:
        "200":
          description: dailyBalance 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyResponse"
  /api/statistics/balance/monthly:
    post:
      tags:
      - Reports
      summary: Monthly balance
      description: Compute the monthly balance based upon the provided request
      operationId: monthlyBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceRequest"
        required: true
      responses:
        "200":
          description: monthlyBalance 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyResponse"
  /api/statistics/balance/partitioned/{partitionKey}:
    post:
      tags:
      - Reports
      summary: Partitioned balance
      description: Partition all transaction matching the balance request using the
        partitionKey provided.
      operationId: partitionedBalance
      parameters:
      - name: partitionKey
        in: path
        description: "The partition key can be one of: account, budget or category"
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceRequest"
        required: true
      responses:
        "200":
          description: partitionedBalance 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BalancePartitionResponse"
  /api/transaction-rules/groups:
    get:
      tags:
      - Transaction Rules
      summary: List rule groups
      description: List all the transaction rule groups available
      operationId: getRuleGroups
      responses:
        "200":
          description: getRuleGroups 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionRuleGroupResponse"
    put:
      tags:
      - Transaction Rules
      summary: Create rule group
      description: Creates a new rule group in the system
      operationId: createRuleGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRenameRequest"
        required: true
      responses:
        "204":
          description: Group successfully created
  /api/transaction-rules/groups/{group}:
    get:
      tags:
      - Transaction Rules
      summary: List transaction rules
      description: Lists all transaction rules present in the requested group
      operationId: getRules
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getRules 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionRuleResponse"
    put:
      tags:
      - Transaction Rules
      summary: Create transaction rule
      description: Creates a new transaction rule in the desired group
      operationId: createTransactionRule
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRuleRequest"
        required: true
      responses:
        "201":
          description: Rule successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRuleResponse"
    delete:
      tags:
      - Transaction Rules
      summary: Delete rule group
      description: "Deletes the rule group from the system, including all rules within\
        \ it"
      operationId: deleteRuleGroup
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: deleteRuleGroup 204 response
    patch:
      tags:
      - Transaction Rules
      summary: Rename rule group
      description: Renames the transaction rule group
      operationId: renameRuleGroup
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRenameRequest"
        required: true
      responses:
        "204":
          description: Successfully updated name
  /api/transaction-rules/groups/{group}/move-down:
    get:
      tags:
      - Transaction Rules
      summary: Move group down
      description: Move the transaction rule group down one in the ordering
      operationId: moveGroupDown
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successfully moved down
  /api/transaction-rules/groups/{group}/move-up:
    get:
      tags:
      - Transaction Rules
      summary: Move group up
      description: Move the transaction rule group up one in the ordering
      operationId: moveGroupUp
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successfully moved up
  /api/transaction-rules/groups/{group}/{id}:
    get:
      tags:
      - Transaction Rules
      summary: Get transaction rule
      description: Returns a single transaction rule by the identified group and rule
      operationId: getTransactionRule
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRuleResponse"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
    post:
      tags:
      - Transaction Rules
      summary: Update transaction rule
      description: Updates the transaction rule with the provided settings
      operationId: updateTransactionRule
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRuleRequest"
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRuleResponse"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
        "401":
          description: "The user is not authenticated, login first."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
    delete:
      tags:
      - Transaction Rules
      summary: Delete transaction rule
      description: Removes the desired rule from the system
      operationId: deleteTransactionRule
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Successfully deleted
  /api/transaction-rules/groups/{group}/{id}/move-down:
    get:
      tags:
      - Transaction Rules
      summary: Move transaction rule down
      description: Moves the transaction rule down by one in the ordering
      operationId: moveTransactionRuleDown
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Successfully moved down
  /api/transaction-rules/groups/{group}/{id}/move-up:
    get:
      tags:
      - Transaction Rules
      summary: Move transaction rule up
      description: Moves the transaction rule up by one in the ordering
      operationId: moveTransactionRuleUp
      parameters:
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Successfully moved up
  /api/transactions:
    post:
      tags:
      - Transactions
      summary: Search transactions
      description: Search in all transactions using the given search request.
      operationId: searchTransactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionSearchRequest_1"
        required: true
      responses:
        "200":
          description: searchTransactions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultPageResponse_TransactionResponse_"
    patch:
      tags:
      - Transactions
      summary: Patch given transactions
      description: Update the transactions with the given transaction ids using the
        request.
      operationId: patchTransactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionBulkEditRequest"
        required: true
      responses:
        "204":
          description: patchTransactions 204 response
  /api/transactions/export:
    get:
      tags:
      - Transactions
      summary: Export transactions
      description: Creates a CSV export of all transactions in the system.
      operationId: exportTransactions
      responses:
        "200":
          description: exportTransactions 200 response
          content:
            text/plain:
              schema:
                type: string
  /api/transactions/locate-first:
    post:
      tags:
      - Transactions
      summary: Get oldest date
      description: Get the oldest transaction in the system based upon the provided
        request.
      operationId: getFirstTransactionDate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionSearchRequest_2"
        required: true
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonError"
  /api/transactions/tags:
    get:
      tags:
      - Transactions
      summary: List tags
      description: Get all tags available in the system.
      operationId: getTags
      responses:
        "200":
          description: getTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagResponse"
    post:
      tags:
      - Transactions
      summary: Create tag
      description: Creates a new tag into the system
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagCreateRequest"
        required: true
      responses:
        "200":
          description: createTag 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResponse"
  /api/transactions/tags/auto-complete:
    get:
      tags:
      - Transactions
      summary: Search tag
      description: Look for tags with the partial token in the name
      operationId: lookupTags
      parameters:
      - name: token
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: lookupTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagResponse"
  /api/transactions/tags/{tag}:
    delete:
      tags:
      - Transactions
      summary: Delete tag
      description: "Removes a tag from the system, this prevents it being used in\
        \ updates. But will not remove old relations between tags and transactions."
      operationId: deleteTag
      parameters:
      - name: tag
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteTag 200 response
components:
  schemas:
    AbstractResource_JsonError_:
      type: object
      properties:
        _links:
          type: object
          additionalProperties: true
        _embedded:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/Resource"
    AccountEditRequest:
      required:
      - bic
      - currency
      - description
      - iban
      - interest
      - interestPeriodicity
      - name
      - number
      - type
      type: object
      properties:
        name:
          minLength: 1
          type: string
        description:
          type: string
        currency:
          minLength: 1
          type: string
        iban:
          pattern: "^([A-Z]{2}[ \\-]?[0-9]{2})(?=(?:[ \\-]?[A-Z0-9]){9,30}$)((?:[\
            \ \\-]?[A-Z0-9]{3,5}){2,7})([ \\-]?[A-Z0-9]{1,3})?$"
          type: string
        bic:
          pattern: "^([a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?)$"
          type: string
        number:
          type: string
        interest:
          maximum: 2
          minimum: -2
          type: number
          format: double
        interestPeriodicity:
          $ref: "#/components/schemas/Periodicity"
        type:
          type: string
    AccountImageRequest:
      required:
      - fileCode
      type: object
      properties:
        fileCode:
          type: string
    AccountJson:
      required:
      - bic
      - currency
      - description
      - iban
      - icon
      - interest
      - name
      - number
      - periodicity
      - type
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        currency:
          type: string
        icon:
          type: string
        interest:
          type: number
          format: double
        periodicity:
          $ref: "#/components/schemas/Periodicity"
        iban:
          type: string
        bic:
          type: string
        number:
          type: string
        type:
          type: string
    AccountResponse:
      required:
      - account
      - id
      - name
      - type
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: The identifier of the account
          format: int64
          example: 3212
        name:
          required:
          - "true"
          type: string
          description: "The account name, is unique for the user"
          example: Fast food & co
        description:
          type: string
          description: The description for the account
        type:
          required:
          - "true"
          type: string
          description: "The type of account, as defined by the account type API"
          example: creditor
        iconFileCode:
          type: string
          description: The file code for the image of the account
        account:
          description: Bank identification numbers for the account
          allOf:
          - $ref: "#/components/schemas/AccountResponse.NumberInformation"
        interest:
          description: "The interest information for the account, only used for loans,\
            \ debts and mortgage"
          allOf:
          - $ref: "#/components/schemas/AccountResponse.InterestInformation"
        history:
          description: Transaction history information for the account
          allOf:
          - $ref: "#/components/schemas/AccountResponse.History"
        savingGoals:
          type: array
          description: "The saving goals for the account, only valid for type savings\
            \ and joined_savings"
          items:
            $ref: "#/components/schemas/AccountResponse.SavingGoalResponse"
      description: The account where the money went to
    AccountResponse.History:
      type: object
      properties:
        firstTransaction:
          type: string
          description: The date of the first recorded transaction for the account
          format: date
        lastTransaction:
          type: string
          description: The date of the latest recorded transaction for the account
          format: date
      description: Transaction history information for the account
    AccountResponse.InterestInformation:
      type: object
      properties:
        periodicity:
          description: The interval the interest is calculated on
          example: MONTHS
          allOf:
          - $ref: "#/components/schemas/Periodicity"
        interest:
          type: number
          description: The amount of interest that is owed
          format: double
          example: 0.0754
      description: "The interest information for the account, only used for loans,\
        \ debts and mortgage"
    AccountResponse.NumberInformation:
      type: object
      properties:
        iban:
          type: string
        bic:
          type: string
        number:
          type: string
        currency:
          type: string
      description: Bank identification numbers for the account
    AccountResponse.SavingGoalResponse:
      required:
      - goal
      - id
      - reserved
      - targetDate
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: The identifier of the saving goal
          format: int64
          example: 132
        name:
          type: string
          description: The name of the saving goal
          example: Car replacement
        description:
          type: string
          description: The description of the saving goal
        schedule:
          description: The schedule that allocations are created automatically
          allOf:
          - $ref: "#/components/schemas/ScheduleResponse"
        goal:
          required:
          - "true"
          type: number
          description: The goal one wishes to achieve by the end date
          example: 1500.4
        reserved:
          required:
          - "true"
          type: number
          description: The amount of money reserved for this saving goal
          example: 200
        installments:
          type: number
          description: "The amount of money allocated each interval, only when schedule\
            \ is set"
          example: 25.5
        targetDate:
          required:
          - "true"
          type: string
          description: The date before which the goal must be met
          format: date
          example: 2021-01-12
        monthsLeft:
          type: integer
          description: The amount of months left until the target date
          format: int64
          example: 23
    AccountSavingGoalCreateRequest:
      required:
      - goal
      - name
      - targetDate
      type: object
      properties:
        name:
          minLength: 1
          type: string
        goal:
          minimum: 0
          exclusiveMinimum: true
          type: number
        targetDate:
          type: string
          format: date
    AccountSearchRequest:
      type: object
    AccountSpendingResponse:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/AccountResponse"
        total:
          type: number
          format: double
        average:
          type: number
          format: double
    AccountTransactionCreateRequest:
      required:
      - amount
      - bookDate
      - budget
      - category
      - contract
      - currency
      - date
      - description
      - destination
      - interestDate
      - source
      - tags
      type: object
      properties:
        date:
          type: string
          format: date
        interestDate:
          type: string
          format: date
        bookDate:
          type: string
          format: date
        currency:
          minLength: 1
          type: string
        description:
          maxLength: 1024
          minLength: 1
          type: string
        amount:
          type: number
          format: double
        source:
          $ref: "#/components/schemas/AccountTransactionCreateRequest.EntityRef"
        destination:
          $ref: "#/components/schemas/AccountTransactionCreateRequest.EntityRef"
        category:
          $ref: "#/components/schemas/AccountTransactionCreateRequest.EntityRef"
        budget:
          $ref: "#/components/schemas/AccountTransactionCreateRequest.EntityRef"
        contract:
          $ref: "#/components/schemas/AccountTransactionCreateRequest.EntityRef"
        tags:
          type: array
          items:
            type: string
    AccountTransactionCreateRequest.EntityRef:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    AccountTransactionSearchRequest:
      required:
      - dateRange
      - page
      - text
      type: object
      properties:
        text:
          type: string
        dateRange:
          $ref: "#/components/schemas/AccountTransactionSearchRequest.Range"
        page:
          minimum: 0
          type: integer
          format: int32
    AccountTransactionSearchRequest.Range:
      required:
      - end
      - start
      type: object
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
    AccountTransactionSplitRequest:
      required:
      - splits
      type: object
      properties:
        splits:
          minItems: 2
          type: array
          items:
            $ref: "#/components/schemas/AccountTransactionSplitRequest.SplitRecord"
    AccountTransactionSplitRequest.SplitRecord:
      required:
      - amount
      - description
      type: object
      properties:
        description:
          type: string
        amount:
          type: number
          format: double
    AuthenticationRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          required:
          - "true"
          type: string
          description: "The username, must be a valid e-mail address."
          format: email
          example: me@example.com
        password:
          required:
          - "true"
          type: string
          description: The password
          example: password123
    BalancePartitionResponse:
      required:
      - balance
      - partition
      type: object
      properties:
        partition:
          type: string
        balance:
          type: number
          format: double
    BalanceRequest:
      required:
      - accounts
      - categories
      - contracts
      - dateRange
      - expenses
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/BalanceRequest.EntityRef"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/BalanceRequest.EntityRef"
        contracts:
          type: array
          items:
            $ref: "#/components/schemas/BalanceRequest.EntityRef"
        expenses:
          type: array
          items:
            $ref: "#/components/schemas/BalanceRequest.EntityRef"
        dateRange:
          $ref: "#/components/schemas/BalanceRequest.DateRange"
    BalanceRequest.DateRange:
      type: object
      properties:
        start:
          type: string
          description: Earliest date a transaction may be.
          format: yyyy-mm-dd
        end:
          type: string
          description: Latest date a transaction may be.
          format: yyyy-mm-dd
    BalanceRequest.EntityRef:
      required:
      - id
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: The unique identifier of the entity
          format: int64
    BalanceResponse:
      required:
      - balance
      type: object
      properties:
        balance:
          type: number
          format: double
    BaseStream_ExpenseResponse.Stream_Object__:
      type: object
      properties:
        parallel:
          type: boolean
    BudgetCreateRequest:
      required:
      - income
      - month
      - year
      type: object
      properties:
        start:
          type: string
          format: date
        year:
          minimum: 1900
          type: integer
          format: int32
          deprecated: true
        month:
          maximum: 12
          minimum: 1
          type: integer
          format: int32
          deprecated: true
        income:
          minimum: 0
          type: number
          format: double
    BudgetJson:
      required:
      - end
      - expectedIncome
      - expenses
      - start
      type: object
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
        expectedIncome:
          type: number
          format: double
        expenses:
          type: array
          items:
            $ref: "#/components/schemas/BudgetJson.ExpenseJson"
    BudgetJson.ExpenseJson:
      required:
      - lowerBound
      - name
      - upperBound
      type: object
      properties:
        name:
          type: string
        lowerBound:
          type: number
          format: double
        upperBound:
          type: number
          format: double
    BudgetResponse:
      type: object
      properties:
        income:
          type: number
          format: double
        period:
          $ref: "#/components/schemas/BudgetResponse.Period"
        expenses:
          $ref: "#/components/schemas/Stream_ExpenseResponse_"
    BudgetResponse.Period:
      type: object
      properties:
        from:
          type: string
          format: date
        until:
          type: string
          format: date
    CSVImporterConfigCreateRequest:
      required:
      - fileCode
      - name
      - type
      type: object
      properties:
        type:
          minLength: 1
          type: string
          description: The type of importer that is to be used
        name:
          minLength: 1
          type: string
          description: The name of the configuration
        fileCode:
          minLength: 1
          type: string
          description: The file code to get the contents of the configuration
    CSVImporterConfigResponse:
      type: object
      properties:
        id:
          type: integer
          description: The configuration identifier
          format: int64
        name:
          type: string
          description: The name of the configuration
        type:
          type: string
          description: The type of importer that will be used
        file:
          type: string
          description: The file code to get the contents of the configuration
      description: Get the configuration used during the import
    CategoryCreateRequest:
      required:
      - description
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        description:
          maxLength: 1024
          type: string
    CategoryJson:
      required:
      - description
      - label
      type: object
      properties:
        label:
          type: string
        description:
          type: string
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        description:
          type: string
        lastUsed:
          type: string
          format: date
    CategorySearchRequest:
      required:
      - page
      type: object
      properties:
        page:
          type: integer
          format: int32
    Charset:
      type: object
      properties:
        registered:
          type: boolean
    ComputedExpenseResponse:
      required:
      - spent
      type: object
      properties:
        spent:
          type: number
          format: double
        dailySpent:
          type: number
          format: double
        left:
          type: number
          format: double
        dailyLeft:
          type: number
          format: double
    ContractAttachmentRequest:
      type: object
      properties:
        fileCode:
          type: string
          description: The file code of the attachment.
          example: "1234567890"
    ContractCreateRequest:
      required:
      - company
      - end
      - name
      - start
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the contract.
          example: Contract 1
        description:
          type: string
          description: The description of the contract.
          example: Contract 1 description
        company:
          description: The company the contract is with.
          allOf:
          - $ref: "#/components/schemas/ContractCreateRequest.EntityRef"
        start:
          type: string
          description: The start date of the contract.
          format: date
        end:
          type: string
          description: The end date of the contract.
          format: date
    ContractCreateRequest.EntityRef:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          description: The id of the company.
          format: int64
          example: 1
        name:
          type: string
          description: The name of the company.
          example: Company 1
    ContractJson:
      required:
      - company
      - contract
      - description
      - end
      - name
      - start
      - terminated
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        company:
          type: string
        contract:
          type: string
        terminated:
          type: boolean
        start:
          type: string
          format: date
        end:
          type: string
          format: date
    ContractOverviewResponse:
      required:
      - active
      - terminated
      type: object
      properties:
        active:
          type: array
          items:
            $ref: "#/components/schemas/ContractResponse"
        terminated:
          type: array
          items:
            $ref: "#/components/schemas/ContractResponse"
    ContractResponse:
      required:
      - company
      - contractAvailable
      - id
      - name
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: The identifier of the contract
          format: int64
        name:
          required:
          - "true"
          type: string
          description: The name of the contract
          example: Cable company
        description:
          type: string
          description: The description for the contract
        contractAvailable:
          required:
          - "true"
          type: boolean
          description: Indicator for an digital copy of the contract being present
        fileToken:
          type: string
          description: The file token to get the digital copy
        start:
          type: string
          description: The start date of the contract
          format: date
        end:
          type: string
          description: The end date of the contract
          format: date
        terminated:
          type: boolean
          description: Indicator that the contract has ended and is closed by the
            user
        notification:
          type: boolean
          description: Indicator if a pre-emptive warning is active before the contract
            end date
        company:
          description: The company / account the contract is with
          allOf:
          - $ref: "#/components/schemas/AccountResponse"
    CreateRuleRequest:
      required:
      - changes
      - conditions
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the rule
        description:
          maxLength: 1024
          type: string
          description: A long description of the rule
        restrictive:
          type: boolean
          description: Should the rule execution stop after a positive match
        active:
          type: boolean
          description: Should the rule be executed when the engine runs
        conditions:
          minItems: 1
          type: array
          description: List of all pre-conditions that must be met
          items:
            $ref: "#/components/schemas/CreateRuleRequest.Condition"
        changes:
          minItems: 1
          type: array
          description: List of all the changes to be applied
          items:
            $ref: "#/components/schemas/CreateRuleRequest.Change"
    CreateRuleRequest.Change:
      required:
      - column
      - value
      type: object
      properties:
        id:
          type: integer
          description: The identifier of an already existing change
          format: int64
        column:
          description: The column on which the change is effected
          example: CATEGORY
          allOf:
          - $ref: "#/components/schemas/RuleColumn"
        value:
          minLength: 1
          type: string
          description: "The value to be applied, this could be an identifier"
          example: "1"
    CreateRuleRequest.Condition:
      required:
      - column
      - operation
      - value
      type: object
      properties:
        id:
          type: integer
          description: The identifier of an existing pre-condition
          format: int64
        column:
          description: The column on which to look for the pre-condition
          allOf:
          - $ref: "#/components/schemas/RuleColumn"
        operation:
          description: The type of comparison operation to perform
          allOf:
          - $ref: "#/components/schemas/RuleOperation"
        value:
          minLength: 1
          type: string
          description: The value the column must have to match the pre-condition
          example: My personal account
    CreateScheduleRequest:
      required:
      - schedule
      - source
      type: object
      properties:
        schedule:
          $ref: "#/components/schemas/ScheduleValue"
        source:
          description: The account to charge for every scheduled transaction.
          allOf:
          - $ref: "#/components/schemas/CreateScheduleRequest.EntityRef"
        amount:
          type: number
          description: The amount to charge for every scheduled transaction.
          format: double
          example: 100
    CreateScheduleRequest.EntityRef:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: The id of the account.
          format: int64
          example: 1
        name:
          type: string
    CurrencyPatchRequest:
      required:
      - decimalPlaces
      - enabled
      type: object
      properties:
        decimalPlaces:
          type: integer
          format: int32
        enabled:
          type: boolean
    CurrencyRequest:
      required:
      - code
      - name
      - symbol
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
        code:
          maxLength: 3
          minLength: 1
          type: string
        symbol:
          maxLength: 1
          minLength: 1
          type: string
    CurrencyResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the currency
          example: United States dollar
        code:
          type: string
          description: The ISO code of the currency
          example: USD
        symbol:
          type: string
          description: The currency symbol
          example: $
        numberDecimals:
          type: integer
          description: The default amount of decimal places for this currency
          format: int32
          example: 2
        enabled:
          type: boolean
          description: Indication if the currency is enabled for the application
    DailyResponse:
      type: object
      properties:
        date:
          type: string
          description: The date of the summary.
          format: yyyy-mm-dd
        amount:
          type: number
          description: The amount of money for the given date.
          format: double
    DateRangeResponse:
      required:
      - end
      - start
      type: object
      properties:
        start:
          required:
          - "true"
          type: string
          description: The start of the date range
          format: date
          example: 2020-01-01
        end:
          required:
          - "true"
          type: string
          description: The end of the date range
          format: date
          example: 2020-01-31
    EntityRef:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the entity.
          format: int64
        name:
          type: string
    EntityRef.NamedEntity:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ExpensePatchRequest:
      required:
      - amount
      - expenseId
      - name
      type: object
      properties:
        expenseId:
          type: integer
          format: int64
        name:
          type: string
        amount:
          minimum: 0
          type: number
          format: double
    ExportJson:
      required:
      - accounts
      - budgetPeriods
      - categories
      - contracts
      - rules
      - tags
      - transactions
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/AccountJson"
        rules:
          type: array
          items:
            $ref: "#/components/schemas/RuleConfigJson.RuleJson"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryJson"
        budgetPeriods:
          type: array
          items:
            $ref: "#/components/schemas/BudgetJson"
        contracts:
          type: array
          items:
            $ref: "#/components/schemas/ContractJson"
        tags:
          type: array
          items:
            type: string
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/TransactionJson"
    FailureCode:
      type: string
      enum:
      - FROM_TO_SAME
      - AMOUNT_NOT_NULL
      - POSSIBLE_DUPLICATE
    GroupRenameRequest:
      required:
      - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The new name of the group
          example: My renamed group
    ImportSearchRequest:
      required:
      - page
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
    ImporterCreateRequest:
      required:
      - configuration
      - uploadToken
      type: object
      properties:
        configuration:
          minLength: 1
          type: string
        uploadToken:
          minLength: 1
          type: string
    ImporterResponse:
      required:
      - created
      - slug
      type: object
      properties:
        slug:
          required:
          - "true"
          type: string
          description: The unique identifier of the import job
          example: 83c3a405939f741cee534d48e600528c
        created:
          required:
          - "true"
          type: string
          description: The date the job was created
          format: date-time
          example: 2020-02-02T10:00:00Z
        finished:
          type: string
          description: The date the job was finished
          format: date-time
          example: 2020-03-02T12:00:00Z
        config:
          description: Get the configuration used during the import
          allOf:
          - $ref: "#/components/schemas/CSVImporterConfigResponse"
        balance:
          description: Get the affected balance during the import
          allOf:
          - $ref: "#/components/schemas/ImporterResponse.Balance"
    ImporterResponse.Balance:
      type: object
      properties:
        totalIncome:
          type: number
          description: The total amount of money earned in this import
          format: double
        totalExpense:
          type: number
          description: The total amount of money spent in this import
          format: double
      description: Get the affected balance during the import
    JsonError:
      required:
      - message
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractResource_JsonError_"
      - properties:
          _links:
            type: object
            additionalProperties: true
          _embedded:
            type: object
            additionalProperties:
              type: array
              items:
                $ref: "#/components/schemas/Resource"
          message:
            type: string
          logref:
            type: string
            nullable: true
          path:
            type: string
            nullable: true
    LanguageResponse:
      required:
      - text
      type: object
      properties:
        text:
          type: string
    MediaType:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        subtype:
          type: string
        extension:
          type: string
        parameters:
          $ref: "#/components/schemas/OptionalValues_String_"
        quality:
          type: string
        qualityAsNumber:
          type: number
        version:
          type: string
        charset:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Charset"
        textBased:
          type: boolean
    MultiFactorRequest:
      required:
      - verificationCode
      type: object
      properties:
        verificationCode:
          maxLength: 8
          minLength: 4
          type: string
    MultiFactorRequest_1:
      required:
      - verificationCode
      type: object
      properties:
        verificationCode:
          maxLength: 8
          minLength: 4
          pattern: "[\\d]{6}"
          required:
          - "true"
          type: string
          description: The 2-factor verification code from a hardware device.
    OptionalMultiValues_Link_:
      $ref: "#/components/schemas/OptionalValues_List_Link__"
    OptionalMultiValues_Resource_:
      $ref: "#/components/schemas/OptionalValues_List_Resource__"
    OptionalValues_List_Link__:
      type: object
      properties:
        empty:
          type: boolean
    OptionalValues_List_Resource__:
      type: object
      properties:
        empty:
          type: boolean
    OptionalValues_String_:
      type: object
      properties:
        empty:
          type: boolean
    PatchProfileRequest:
      required:
      - currency
      - password
      - theme
      type: object
      properties:
        theme:
          type: string
        currency:
          type: string
        password:
          type: string
    Periodicity:
      type: string
      description: The interval the interest is calculated on
      example: MONTHS
      enum:
      - MONTHS
      - WEEKS
      - YEARS
    ProcessResponse:
      type: object
      properties:
        id:
          type: string
        process:
          type: string
        businessKey:
          type: string
        state:
          type: string
    ProcessTaskResponse:
      type: object
      properties:
        id:
          type: string
        definition:
          type: string
        created:
          type: string
          format: date-time
        form:
          type: string
        name:
          type: string
    ProcessVariable:
      type: object
    ProcessVariableResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        value: {}
    Resource:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/OptionalMultiValues_Link_"
        _embedded:
          $ref: "#/components/schemas/OptionalMultiValues_Resource_"
    ResultPageResponse.Info:
      required:
      - pageSize
      - pages
      - records
      type: object
      properties:
        records:
          required:
          - "true"
          type: integer
          description: The total amount of matches
          format: int64
          example: 20
        pages:
          required:
          - "true"
          type: integer
          description: The amount of pages available
          format: int32
          example: 2
        pageSize:
          required:
          - "true"
          type: integer
          description: The amount of matches per page
          format: int32
          example: 15
      description: The meta-information for the page
    ResultPageResponse_AccountResponse_:
      required:
      - content
      - info
      type: object
      properties:
        content:
          required:
          - "true"
          type: array
          description: The actual contents of the page
          items:
            $ref: "#/components/schemas/AccountResponse"
        info:
          description: The meta-information for the page
          allOf:
          - $ref: "#/components/schemas/ResultPageResponse.Info"
    ResultPageResponse_CategoryResponse_:
      required:
      - content
      - info
      type: object
      properties:
        content:
          required:
          - "true"
          type: array
          description: The actual contents of the page
          items:
            $ref: "#/components/schemas/CategoryResponse"
        info:
          description: The meta-information for the page
          allOf:
          - $ref: "#/components/schemas/ResultPageResponse.Info"
    ResultPageResponse_ImporterResponse_:
      required:
      - content
      - info
      type: object
      properties:
        content:
          required:
          - "true"
          type: array
          description: The actual contents of the page
          items:
            $ref: "#/components/schemas/ImporterResponse"
        info:
          description: The meta-information for the page
          allOf:
          - $ref: "#/components/schemas/ResultPageResponse.Info"
    ResultPageResponse_TransactionResponse_:
      required:
      - content
      - info
      type: object
      properties:
        content:
          required:
          - "true"
          type: array
          description: The actual contents of the page
          items:
            $ref: "#/components/schemas/TransactionResponse"
        info:
          description: The meta-information for the page
          allOf:
          - $ref: "#/components/schemas/ResultPageResponse.Info"
    RuleColumn:
      type: string
      enum:
      - SOURCE_ACCOUNT
      - TO_ACCOUNT
      - DESCRIPTION
      - AMOUNT
      - CATEGORY
      - CHANGE_TRANSFER_TO
      - CHANGE_TRANSFER_FROM
      - BUDGET
      - CONTRACT
      - TAGS
    RuleConfigJson.ChangeJson:
      required:
      - field
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/RuleColumn"
        value:
          type: string
    RuleConfigJson.ConditionJson:
      required:
      - field
      - operation
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/RuleColumn"
        operation:
          $ref: "#/components/schemas/RuleOperation"
        value:
          type: string
    RuleConfigJson.RuleJson:
      required:
      - active
      - changes
      - conditions
      - description
      - group
      - name
      - restrictive
      - sort
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        restrictive:
          type: boolean
        active:
          type: boolean
        sort:
          type: integer
          format: int32
        group:
          type: string
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/RuleConfigJson.ConditionJson"
        changes:
          type: array
          items:
            $ref: "#/components/schemas/RuleConfigJson.ChangeJson"
    RuleOperation:
      type: string
      enum:
      - EQUALS
      - CONTAINS
      - STARTS_WITH
      - LESS_THAN
      - MORE_THAN
    ScheduleResponse:
      required:
      - interval
      - periodicity
      type: object
      properties:
        periodicity:
          description: The type of the interval
          example: MONTHS
          allOf:
          - $ref: "#/components/schemas/Periodicity"
        interval:
          required:
          - "true"
          type: integer
          description: The actual interval
          format: int32
          example: 3
      description: The schedule that allocations are created automatically
    ScheduleSearchRequest:
      required:
      - accounts
      - contracts
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/ScheduleSearchRequest.EntityRef"
        contracts:
          type: array
          items:
            $ref: "#/components/schemas/ScheduleSearchRequest.EntityRef"
    ScheduleSearchRequest.EntityRef:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
    ScheduleValue:
      required:
      - interval
      - periodicity
      type: object
      properties:
        periodicity:
          $ref: "#/components/schemas/Periodicity"
        interval:
          type: integer
          format: int32
    ScheduledTransactionCreateRequest:
      required:
      - amount
      - destination
      - name
      - schedule
      - source
      type: object
      properties:
        schedule:
          $ref: "#/components/schemas/ScheduleValue"
        name:
          minLength: 1
          type: string
        amount:
          type: number
          format: double
        source:
          $ref: "#/components/schemas/ScheduledTransactionCreateRequest.EntityRef"
        destination:
          $ref: "#/components/schemas/ScheduledTransactionCreateRequest.EntityRef"
    ScheduledTransactionCreateRequest.EntityRef:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ScheduledTransactionPatchRequest:
      required:
      - description
      - name
      - range
      - schedule
      type: object
      properties:
        schedule:
          $ref: "#/components/schemas/ScheduleValue"
        range:
          $ref: "#/components/schemas/ScheduledTransactionPatchRequest.DateRange"
        name:
          type: string
        description:
          type: string
    ScheduledTransactionPatchRequest.DateRange:
      required:
      - end
      - start
      type: object
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
    ScheduledTransactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        range:
          $ref: "#/components/schemas/DateRangeResponse"
        schedule:
          $ref: "#/components/schemas/ScheduleResponse"
        amount:
          type: number
          format: double
        source:
          $ref: "#/components/schemas/AccountResponse"
        destination:
          $ref: "#/components/schemas/AccountResponse"
        contract:
          $ref: "#/components/schemas/ContractResponse"
    SessionResponse:
      required:
      - id
      - token
      - validFrom
      - validUntil
      type: object
      properties:
        id:
          required:
          - "true"
          type: integer
          description: The identifier of the active session
          format: int64
        description:
          type: string
          description: The description of the session
        token:
          required:
          - "true"
          type: string
          description: The long lived token of the session
        validFrom:
          required:
          - "true"
          type: string
          description: The start date of the session
          format: date-time
        validUntil:
          required:
          - "true"
          type: string
          description: The end date of the session
          format: date-time
    SettingResponse:
      required:
      - name
      - type
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        type:
          $ref: "#/components/schemas/SettingType"
    SettingType:
      type: string
      enum:
      - STRING
      - NUMBER
      - FLAG
      - DATE
    SettingUpdateRequest:
      required:
      - value
      type: object
      properties:
        value:
          type: string
    Stream_ExpenseResponse_:
      $ref: "#/components/schemas/BaseStream_ExpenseResponse.Stream_Object__"
    TagCreateRequest:
      required:
      - tag
      type: object
      properties:
        tag:
          minLength: 1
          required:
          - "true"
          type: string
          description: The name of the tag to be created
          example: Car expenses
      description: The tag create request is used to add new tags to FinTrack
    TagResponse:
      type: object
      properties:
        name:
          type: string
    TokenCreateRequest:
      required:
      - description
      - expires
      type: object
      properties:
        description:
          type: string
        expires:
          type: string
          format: date
    TransactionBulkEditRequest:
      required:
      - transactions
      type: object
      properties:
        transactions:
          minLength: 1
          minItems: 1
          type: array
          description: A list of all transaction identifiers that should be updated.
          items:
            type: integer
            format: int64
        contract:
          description: The contract to set to all transactions
          allOf:
          - $ref: "#/components/schemas/EntityRef"
        budget:
          description: The budget expense to set to all transactions
          allOf:
          - $ref: "#/components/schemas/EntityRef"
        category:
          description: The category to set to all transactions
          allOf:
          - $ref: "#/components/schemas/EntityRef"
        tags:
          type: array
          description: The list of tags to set to the transactions
          items:
            type: string
    TransactionJson:
      required:
      - amount
      - bookDate
      - currency
      - date
      - description
      - fromAccount
      - interestDate
      - toAccount
      type: object
      properties:
        fromAccount:
          type: string
        toAccount:
          type: string
        description:
          type: string
        currency:
          type: string
        amount:
          type: number
          format: double
        date:
          type: string
          format: date
        interestDate:
          type: string
          format: date
        bookDate:
          type: string
          format: date
    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of this transaction
          format: int64
          example: 1
        description:
          type: string
          description: The description of the transaction
          example: Purchase of flowers
        currency:
          type: string
          description: The currency the transaction was in
          example: EUR
        amount:
          type: number
          description: The amount of money transferred from one account into the other
          format: double
          example: 30.5
        metadata:
          description: The meta-information of the transaction
          allOf:
          - $ref: "#/components/schemas/TransactionResponse.Metadata"
        type:
          description: The type of transaction
          allOf:
          - $ref: "#/components/schemas/TransactionResponse.Type"
        dates:
          description: All dates relevant for this transaction
          allOf:
          - $ref: "#/components/schemas/TransactionResponse.Dates"
        destination:
          description: The account where the money went to
          allOf:
          - $ref: "#/components/schemas/AccountResponse"
        source:
          description: The account where the money came from
          allOf:
          - $ref: "#/components/schemas/AccountResponse"
        split:
          type: array
          description: "The multi-line split of the transaction, eg: purchased items"
          items:
            $ref: "#/components/schemas/TransactionResponse.SplitAmount"
    TransactionResponse.Dates:
      type: object
      properties:
        transaction:
          type: string
          description: The date this transaction was created
          format: date
        booked:
          type: string
          description: The date the transaction was recorded into the books
          format: date
        interest:
          type: string
          description: The date from which the transaction gets interest applied
          format: date
      description: All dates relevant for this transaction
    TransactionResponse.Metadata:
      type: object
      properties:
        category:
          type: string
          description: The category this transaction was linked to
          example: Food related expenses
        budget:
          type: string
          description: The budget expense this transaction contributes to
          example: Dining out
        contract:
          type: string
          description: This transaction is part of this contract
          example: Weekly dining
        import:
          type: string
          description: The import job that created the transaction
          example: 0b9b79faddd9ad388f3aa3b59048b7cd
        failureCode:
          $ref: "#/components/schemas/FailureCode"
        tags:
          type: array
          description: The tags that the transaction has
          example: "food,dining"
          items:
            type: string
      description: The meta-information of the transaction
    TransactionResponse.SplitAmount:
      type: object
      properties:
        description:
          type: string
        amount:
          type: number
          format: double
    TransactionResponse.Type:
      type: object
      properties:
        code:
          type: string
          description: The type of transaction
          enum:
          - CREDIT
          - DEBIT
          - TRANSFER
        class:
          type: string
          description: The font-awesome class for this transaction type
          example: exchange-alt
      description: The type of transaction
    TransactionRuleGroupResponse:
      type: object
      properties:
        name:
          type: string
        sort:
          type: integer
          format: int32
    TransactionRuleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
          description: The description for this transaction rule.
        active:
          type: boolean
          description: True if the rule is active in the system.
        restrictive:
          type: boolean
          description: True if the rule terminates the flow of rule execution.
        sort:
          type: integer
          description: The sort order of the rule.
          format: int32
        changes:
          type: array
          description: The changes this rule will apply on any transaction matching
            the condition.
          items:
            $ref: "#/components/schemas/TransactionRuleResponse.Change"
        conditions:
          type: array
          description: The conditions this rule will check for on any given transaction.
          items:
            $ref: "#/components/schemas/TransactionRuleResponse.Condition"
    TransactionRuleResponse.Change:
      type: object
      properties:
        id:
          type: integer
          format: int64
        field:
          $ref: "#/components/schemas/RuleColumn"
        change:
          type: string
    TransactionRuleResponse.Condition:
      type: object
      properties:
        id:
          type: integer
          format: int64
        field:
          $ref: "#/components/schemas/RuleColumn"
        operation:
          $ref: "#/components/schemas/RuleOperation"
        condition:
          type: string
    TransactionSearchRequest:
      required:
      - page
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
    TransactionSearchRequest.DateRange:
      type: object
      properties:
        start:
          type: string
          description: Any matching transaction must be after this date
          format: date
        end:
          type: string
          description: Any matching transaction must be before this date
          format: date
    TransactionSearchRequest.EntityRef:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the relationship
          format: int64
    TransactionSearchRequest_1:
      required:
      - dateRange
      type: object
      properties:
        description:
          type: string
          description: The partial description the transaction should match
          example: saving tra
        account:
          type: string
          description: The partial name of one of the accounts involved in the transaction
        currency:
          type: string
          description: The currency the transaction must have
        onlyExpense:
          type: boolean
          description: Only include transactions considered as expense from one own
            accounts
        onlyIncome:
          type: boolean
          description: Only include transactions considered as income from one own
            accounts
        category:
          description: The category that the transaction must have
          allOf:
          - $ref: "#/components/schemas/TransactionSearchRequest.EntityRef"
        budget:
          description: The budget expense that the transaction must have
          allOf:
          - $ref: "#/components/schemas/TransactionSearchRequest.EntityRef"
        transfers:
          type: boolean
          description: Only include transactions between one own accounts
        dateRange:
          description: The range wherein the transaction date must be
          allOf:
          - $ref: "#/components/schemas/TransactionSearchRequest.DateRange"
        page:
          minimum: 0
          type: integer
          description: Set the page number in the resulting pages
          format: int32
    TransactionSearchRequest_2:
      required:
      - dateRange
      type: object
      properties:
        description:
          type: string
          description: The partial description the transaction should match
          example: saving tra
        account:
          type: string
          description: The partial name of one of the accounts involved in the transaction
        currency:
          type: string
          description: The currency the transaction must have
        onlyExpense:
          type: boolean
          description: Only include transactions considered as expense from one own
            accounts
        onlyIncome:
          type: boolean
          description: Only include transactions considered as income from one own
            accounts
        category:
          description: The category that the transaction must have
          allOf:
          - $ref: "#/components/schemas/TransactionSearchRequest.EntityRef"
        budget:
          description: The budget expense that the transaction must have
          allOf:
          - $ref: "#/components/schemas/TransactionSearchRequest.EntityRef"
        transfers:
          type: boolean
          description: Only include transactions between one own accounts
        dateRange:
          description: The range wherein the transaction date must be
          allOf:
          - $ref: "#/components/schemas/TransactionSearchRequest.DateRange"
        page:
          minimum: 0
          type: integer
          description: Set the page number in the resulting pages
          format: int32
    UploadResponse:
      required:
      - fileCode
      type: object
      properties:
        fileCode:
          type: string
    UserProfileResponse:
      type: object
      properties:
        theme:
          type: string
        currency:
          type: string
        profilePicture:
          type: string
        mfa:
          type: boolean
    VariableMap:
      type: object
      properties:
        variables:
          description: The actual map of all the variables set for the task.
          allOf:
          - type: object
            additionalProperties:
              $ref: "#/components/schemas/ProcessVariable"
          - {}
      description: A map of variables used in tasks.
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
